*** ToDo MVC

**** models/
°Contiene la definición de los modelos.
°El nombre del archivo empieza en Mayúscula.
°Un modelo es una variable que puede manipular
una colección de un Base de Datos.
°En la definición del modelo se especifica el nombre
de la colección con la que está relacionado el modelo
°Este modelo sera importado por un archivo tipo controlador

**** controllers/
°Cada archivo, es un conjunto de funciones guardadas en
un objeto.
°Estas funciones son llamadas cuando una ruta se solicita
°Aquí se llama al Modelo para definir funciones que manipulen
la DB
°Estas funciones pueden renderear un archivo .ejs, incrustando
los datos obtenidos de la DB
°También se definen funciones que no interactuan con la DB
°Este objecto de funciones sera importado por algún archivo
de routes/

**** routes/
En cada archivo se crea un enrutador.
Este enrutador tiene todas las direcciones.
Cada ruta tiene una función ( controlador) 

 routes/home.js
        todos.js

	express = require('express')
	todosRouter = express.Router()
	controlador = require('../controllers/todos')

	todosRouter.get("/", controlador.renderTodos)

°Un enrutador es llamado en server.js, 
y se relaciona con un dirección base.
°Todas las rutas del enrutador tiene como prefijo
la dirección base dada en server.js
°Para relacionar una dirección base y un enrutador
se utiliza server.use("/rutaBase", enrutador)

-server.js
	
+ server.use("/todos", enrutador)

**** views/
°Son los archivos .ejs que son llamados por las funciones
de los controladores para renderizar e incrustar variables
°Esta carpeta se relaciona con:
-server.js
...
	server.set('view engine', 'ejs')
	
-/controllers/todos.js
...
	res.render('file.ejs', {x:42}) 
°res.render busca en la carpeta views/ automaticamente
°El html generado es pasado al controlador, para que éste
se lo mande al cliente


**** public/
Son los archivos que una vez cargado un archivo .html
solicita como: main.js, style.css, photo.jpg 
el middleware se encarga de servir estos archivos
	server.use( express.static('public') )

**** config/
  dbConexion.js
°Se define la función encargada de conectarse a la DB
°Esta función será importada en server.js
°Una vez establecida la conexión cualquier modelo puede
interactuar con los documentod de esa DB
  .env
°Se colocan las variables de entorno, variables sensibles
URI_ATLAS=""  
            

